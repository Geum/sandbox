const React = require('react');
const CommentList = require('@components/comment/CommentList');
const CommentForm = require('@components/comment/CommentForm');
var { connect } = require('react-redux');

class CommentBox extends React.Component {
  loadCommentsFromServer() {
    //TODO how to ajax??
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.props.setComments(data);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }

  handleCommentSubmit(comment) {
    var comments = this.props.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    this.props.addComment(comment);

    //TODO: how to ajax??
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.props.setComments(data);
      }.bind(this),
      error: function(xhr, status, err) {
        this.props.setComments(comments);
      }.bind(this)
    });
  }

  componentDidMount() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  }

  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
}

//adapter
module.exports = connect(
  (state) => {
    return {
      data: state.data,
      url: state.url,
      pollInterval: state.pollInterval
    }
  },
  (dispatch) => {
    return {
      addComment: function(comment) {
        comment.id = Date.now();
        dispatch({
          type: 'add_comment',
          comment: comment,
        })
      },
      setComments: function(data) {
        dispatch({
          type: 'set_comments',
          data: data
        })
      }
    }
  }
)(CommentBox);
